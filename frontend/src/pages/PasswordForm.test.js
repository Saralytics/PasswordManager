// input form validation:
// - submit with all empty fields
// - submit with 1 empty fields
// - submit with fields correctly

// Form submission:
// - Displays success message if the submision is a success (200 response)
// - Displays error message
// - Displays unauthorized message

// Generate password function



import axios from 'axios';
import MockAdapter from 'axios-mock-adapter';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import StorePasswordForm from './StorePasswordForm';

const mockAxios = new MockAdapter(axios);

describe('StorePasswordForm', () => {
    beforeEach(() => {
      mockAxios.reset();
      jest.clearAllMocks();
    });
  
    it('validates input fields correctly', async () => {
      render(<StorePasswordForm />);
      fireEvent.click(screen.getByText('Store Password'));
      expect(screen.getByText('All fields are required.')).toBeInTheDocument();
    });
  
    it('generate password success', async () => {
      mockAxios.onGet('http://localhost:8000/vault/passwords/generate/').reply(200, { password: 'autoGeneratedPassword' });
      render(<StorePasswordForm />);
      userEvent.click(screen.getByText('Generate'));
      await screen.findByDisplayValue('autoGeneratedPassword');
    });
  
    it('generate password fails with unauthorized access', async () => {
      mockAxios.onGet('http://localhost:8000/vault/passwords/generate/').reply(403);
      render(<StorePasswordForm />);
      userEvent.click(screen.getByText('Generate'));
      await screen.findByText('You must be logged in to perform this action.');
    });
  
    it('submits the form successfully', async () => {
      mockAxios.onPost('http://localhost:8000/vault/passwords/create/').reply(200, { message: 'Password stored successfully' });
      render(<StorePasswordForm />);
      userEvent.type(screen.getByLabelText('Website URL:'), 'https://example.com');
      userEvent.type(screen.getByLabelText('Username:'), 'user123');
      userEvent.type(screen.getByLabelText('Password:'), 'Password123!');
      fireEvent.click(screen.getByText('Store Password'));
      await screen.findByText('Password stored successfully');
    });
  
    it('form submission fails with server error', async () => {
      mockAxios.onPost('http://localhost:8000/vault/passwords/create/').reply(500);
      render(<StorePasswordForm />);
      userEvent.type(screen.getByLabelText('Website URL:'), 'https://example.com');
      userEvent.type(screen.getByLabelText('Username:'), 'user123');
      userEvent.type(screen.getByLabelText('Password:'), 'Password123!');
      fireEvent.click(screen.getByText('Store Password'));
      await screen.findByText('An error occurred while storing the password.');
    });
  
    it('form submission unauthorized', async () => {
      mockAxios.onPost('http://localhost:8000/vault/passwords/create/').reply(403);
      render(<StorePasswordForm />);
      userEvent.type(screen.getByLabelText('Website URL:'), 'https://example.com');
      userEvent.type(screen.getByLabelText('Username:'), 'user123');
      userEvent.type(screen.getByLabelText('Password:'), 'Password123!');
      fireEvent.click(screen.getByText('Store Password'));
      await screen.findByText('You must be logged in to perform this action.');
    });
  });
  